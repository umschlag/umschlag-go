// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/umschlag/umschlag-go/models"
)

// AppendTeamToUserReader is a Reader for the AppendTeamToUser structure.
type AppendTeamToUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AppendTeamToUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAppendTeamToUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewAppendTeamToUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewAppendTeamToUserPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewAppendTeamToUserUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewAppendTeamToUserDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAppendTeamToUserOK creates a AppendTeamToUserOK with default headers values
func NewAppendTeamToUserOK() *AppendTeamToUserOK {
	return &AppendTeamToUserOK{}
}

/*AppendTeamToUserOK handles this case with default header values.

Plain success message
*/
type AppendTeamToUserOK struct {
	Payload *models.GeneralError
}

func (o *AppendTeamToUserOK) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/users][%d] appendTeamToUserOK  %+v", 200, o.Payload)
}

func (o *AppendTeamToUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendTeamToUserForbidden creates a AppendTeamToUserForbidden with default headers values
func NewAppendTeamToUserForbidden() *AppendTeamToUserForbidden {
	return &AppendTeamToUserForbidden{}
}

/*AppendTeamToUserForbidden handles this case with default header values.

User is not authorized
*/
type AppendTeamToUserForbidden struct {
	Payload *models.GeneralError
}

func (o *AppendTeamToUserForbidden) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/users][%d] appendTeamToUserForbidden  %+v", 403, o.Payload)
}

func (o *AppendTeamToUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendTeamToUserPreconditionFailed creates a AppendTeamToUserPreconditionFailed with default headers values
func NewAppendTeamToUserPreconditionFailed() *AppendTeamToUserPreconditionFailed {
	return &AppendTeamToUserPreconditionFailed{}
}

/*AppendTeamToUserPreconditionFailed handles this case with default header values.

Failed to parse request body
*/
type AppendTeamToUserPreconditionFailed struct {
	Payload *models.GeneralError
}

func (o *AppendTeamToUserPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/users][%d] appendTeamToUserPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AppendTeamToUserPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendTeamToUserUnprocessableEntity creates a AppendTeamToUserUnprocessableEntity with default headers values
func NewAppendTeamToUserUnprocessableEntity() *AppendTeamToUserUnprocessableEntity {
	return &AppendTeamToUserUnprocessableEntity{}
}

/*AppendTeamToUserUnprocessableEntity handles this case with default header values.

User is already assigned
*/
type AppendTeamToUserUnprocessableEntity struct {
	Payload *models.GeneralError
}

func (o *AppendTeamToUserUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/users][%d] appendTeamToUserUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AppendTeamToUserUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendTeamToUserDefault creates a AppendTeamToUserDefault with default headers values
func NewAppendTeamToUserDefault(code int) *AppendTeamToUserDefault {
	return &AppendTeamToUserDefault{
		_statusCode: code,
	}
}

/*AppendTeamToUserDefault handles this case with default header values.

Some error unrelated to the handler
*/
type AppendTeamToUserDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the append team to user default response
func (o *AppendTeamToUserDefault) Code() int {
	return o._statusCode
}

func (o *AppendTeamToUserDefault) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/users][%d] AppendTeamToUser default  %+v", o._statusCode, o.Payload)
}

func (o *AppendTeamToUserDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

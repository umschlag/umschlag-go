// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewShowTeamParams creates a new ShowTeamParams object
// with the default values initialized.
func NewShowTeamParams() *ShowTeamParams {
	var ()
	return &ShowTeamParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewShowTeamParamsWithTimeout creates a new ShowTeamParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewShowTeamParamsWithTimeout(timeout time.Duration) *ShowTeamParams {
	var ()
	return &ShowTeamParams{

		timeout: timeout,
	}
}

// NewShowTeamParamsWithContext creates a new ShowTeamParams object
// with the default values initialized, and the ability to set a context for a request
func NewShowTeamParamsWithContext(ctx context.Context) *ShowTeamParams {
	var ()
	return &ShowTeamParams{

		Context: ctx,
	}
}

// NewShowTeamParamsWithHTTPClient creates a new ShowTeamParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewShowTeamParamsWithHTTPClient(client *http.Client) *ShowTeamParams {
	var ()
	return &ShowTeamParams{
		HTTPClient: client,
	}
}

/*ShowTeamParams contains all the parameters to send to the API endpoint
for the show team operation typically these are written to a http.Request
*/
type ShowTeamParams struct {

	/*TeamID
	  A team UUID or slug

	*/
	TeamID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the show team params
func (o *ShowTeamParams) WithTimeout(timeout time.Duration) *ShowTeamParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the show team params
func (o *ShowTeamParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the show team params
func (o *ShowTeamParams) WithContext(ctx context.Context) *ShowTeamParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the show team params
func (o *ShowTeamParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the show team params
func (o *ShowTeamParams) WithHTTPClient(client *http.Client) *ShowTeamParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the show team params
func (o *ShowTeamParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTeamID adds the teamID to the show team params
func (o *ShowTeamParams) WithTeamID(teamID string) *ShowTeamParams {
	o.SetTeamID(teamID)
	return o
}

// SetTeamID adds the teamId to the show team params
func (o *ShowTeamParams) SetTeamID(teamID string) {
	o.TeamID = teamID
}

// WriteToRequest writes these params to a swagger request
func (o *ShowTeamParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param team_id
	if err := r.SetPathParam("team_id", o.TeamID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

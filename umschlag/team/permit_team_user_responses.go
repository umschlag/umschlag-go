// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/umschlag/umschlag-go/models"
)

// PermitTeamUserReader is a Reader for the PermitTeamUser structure.
type PermitTeamUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PermitTeamUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPermitTeamUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewPermitTeamUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewPermitTeamUserPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewPermitTeamUserUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPermitTeamUserDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPermitTeamUserOK creates a PermitTeamUserOK with default headers values
func NewPermitTeamUserOK() *PermitTeamUserOK {
	return &PermitTeamUserOK{}
}

/*PermitTeamUserOK handles this case with default header values.

Plain success message
*/
type PermitTeamUserOK struct {
	Payload *models.GeneralError
}

func (o *PermitTeamUserOK) Error() string {
	return fmt.Sprintf("[PUT /teams/{team_id}/users][%d] permitTeamUserOK  %+v", 200, o.Payload)
}

func (o *PermitTeamUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitTeamUserForbidden creates a PermitTeamUserForbidden with default headers values
func NewPermitTeamUserForbidden() *PermitTeamUserForbidden {
	return &PermitTeamUserForbidden{}
}

/*PermitTeamUserForbidden handles this case with default header values.

User is not authorized
*/
type PermitTeamUserForbidden struct {
	Payload *models.GeneralError
}

func (o *PermitTeamUserForbidden) Error() string {
	return fmt.Sprintf("[PUT /teams/{team_id}/users][%d] permitTeamUserForbidden  %+v", 403, o.Payload)
}

func (o *PermitTeamUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitTeamUserPreconditionFailed creates a PermitTeamUserPreconditionFailed with default headers values
func NewPermitTeamUserPreconditionFailed() *PermitTeamUserPreconditionFailed {
	return &PermitTeamUserPreconditionFailed{}
}

/*PermitTeamUserPreconditionFailed handles this case with default header values.

Failed to parse request body
*/
type PermitTeamUserPreconditionFailed struct {
	Payload *models.GeneralError
}

func (o *PermitTeamUserPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /teams/{team_id}/users][%d] permitTeamUserPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PermitTeamUserPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitTeamUserUnprocessableEntity creates a PermitTeamUserUnprocessableEntity with default headers values
func NewPermitTeamUserUnprocessableEntity() *PermitTeamUserUnprocessableEntity {
	return &PermitTeamUserUnprocessableEntity{}
}

/*PermitTeamUserUnprocessableEntity handles this case with default header values.

User is not assigned
*/
type PermitTeamUserUnprocessableEntity struct {
	Payload *models.GeneralError
}

func (o *PermitTeamUserUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /teams/{team_id}/users][%d] permitTeamUserUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PermitTeamUserUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitTeamUserDefault creates a PermitTeamUserDefault with default headers values
func NewPermitTeamUserDefault(code int) *PermitTeamUserDefault {
	return &PermitTeamUserDefault{
		_statusCode: code,
	}
}

/*PermitTeamUserDefault handles this case with default header values.

Some error unrelated to the handler
*/
type PermitTeamUserDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the permit team user default response
func (o *PermitTeamUserDefault) Code() int {
	return o._statusCode
}

func (o *PermitTeamUserDefault) Error() string {
	return fmt.Sprintf("[PUT /teams/{team_id}/users][%d] PermitTeamUser default  %+v", o._statusCode, o.Payload)
}

func (o *PermitTeamUserDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/umschlag/umschlag-go/models"
)

// AppendUserToTeamReader is a Reader for the AppendUserToTeam structure.
type AppendUserToTeamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AppendUserToTeamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAppendUserToTeamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewAppendUserToTeamForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewAppendUserToTeamPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewAppendUserToTeamUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewAppendUserToTeamDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAppendUserToTeamOK creates a AppendUserToTeamOK with default headers values
func NewAppendUserToTeamOK() *AppendUserToTeamOK {
	return &AppendUserToTeamOK{}
}

/*AppendUserToTeamOK handles this case with default header values.

Plain success message
*/
type AppendUserToTeamOK struct {
	Payload *models.GeneralError
}

func (o *AppendUserToTeamOK) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/teams][%d] appendUserToTeamOK  %+v", 200, o.Payload)
}

func (o *AppendUserToTeamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendUserToTeamForbidden creates a AppendUserToTeamForbidden with default headers values
func NewAppendUserToTeamForbidden() *AppendUserToTeamForbidden {
	return &AppendUserToTeamForbidden{}
}

/*AppendUserToTeamForbidden handles this case with default header values.

User is not authorized
*/
type AppendUserToTeamForbidden struct {
	Payload *models.GeneralError
}

func (o *AppendUserToTeamForbidden) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/teams][%d] appendUserToTeamForbidden  %+v", 403, o.Payload)
}

func (o *AppendUserToTeamForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendUserToTeamPreconditionFailed creates a AppendUserToTeamPreconditionFailed with default headers values
func NewAppendUserToTeamPreconditionFailed() *AppendUserToTeamPreconditionFailed {
	return &AppendUserToTeamPreconditionFailed{}
}

/*AppendUserToTeamPreconditionFailed handles this case with default header values.

Failed to parse request body
*/
type AppendUserToTeamPreconditionFailed struct {
	Payload *models.GeneralError
}

func (o *AppendUserToTeamPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/teams][%d] appendUserToTeamPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AppendUserToTeamPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendUserToTeamUnprocessableEntity creates a AppendUserToTeamUnprocessableEntity with default headers values
func NewAppendUserToTeamUnprocessableEntity() *AppendUserToTeamUnprocessableEntity {
	return &AppendUserToTeamUnprocessableEntity{}
}

/*AppendUserToTeamUnprocessableEntity handles this case with default header values.

Team is already assigned
*/
type AppendUserToTeamUnprocessableEntity struct {
	Payload *models.GeneralError
}

func (o *AppendUserToTeamUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/teams][%d] appendUserToTeamUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AppendUserToTeamUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendUserToTeamDefault creates a AppendUserToTeamDefault with default headers values
func NewAppendUserToTeamDefault(code int) *AppendUserToTeamDefault {
	return &AppendUserToTeamDefault{
		_statusCode: code,
	}
}

/*AppendUserToTeamDefault handles this case with default header values.

Some error unrelated to the handler
*/
type AppendUserToTeamDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the append user to team default response
func (o *AppendUserToTeamDefault) Code() int {
	return o._statusCode
}

func (o *AppendUserToTeamDefault) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/teams][%d] AppendUserToTeam default  %+v", o._statusCode, o.Payload)
}

func (o *AppendUserToTeamDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

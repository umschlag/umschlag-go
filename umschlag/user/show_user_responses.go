// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/umschlag/umschlag-go/models"
)

// ShowUserReader is a Reader for the ShowUser structure.
type ShowUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ShowUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewShowUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewShowUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewShowUserDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewShowUserOK creates a ShowUserOK with default headers values
func NewShowUserOK() *ShowUserOK {
	return &ShowUserOK{}
}

/*ShowUserOK handles this case with default header values.

The fetched user details
*/
type ShowUserOK struct {
	Payload *models.User
}

func (o *ShowUserOK) Error() string {
	return fmt.Sprintf("[GET /users/{user_id}][%d] showUserOK  %+v", 200, o.Payload)
}

func (o *ShowUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewShowUserForbidden creates a ShowUserForbidden with default headers values
func NewShowUserForbidden() *ShowUserForbidden {
	return &ShowUserForbidden{}
}

/*ShowUserForbidden handles this case with default header values.

User is not authorized
*/
type ShowUserForbidden struct {
	Payload *models.GeneralError
}

func (o *ShowUserForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{user_id}][%d] showUserForbidden  %+v", 403, o.Payload)
}

func (o *ShowUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewShowUserDefault creates a ShowUserDefault with default headers values
func NewShowUserDefault(code int) *ShowUserDefault {
	return &ShowUserDefault{
		_statusCode: code,
	}
}

/*ShowUserDefault handles this case with default header values.

Some error unrelated to the handler
*/
type ShowUserDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the show user default response
func (o *ShowUserDefault) Code() int {
	return o._statusCode
}

func (o *ShowUserDefault) Error() string {
	return fmt.Sprintf("[GET /users/{user_id}][%d] ShowUser default  %+v", o._statusCode, o.Payload)
}

func (o *ShowUserDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

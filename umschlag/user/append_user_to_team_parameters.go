// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/umschlag/umschlag-go/models"
)

// NewAppendUserToTeamParams creates a new AppendUserToTeamParams object
// with the default values initialized.
func NewAppendUserToTeamParams() *AppendUserToTeamParams {
	var ()
	return &AppendUserToTeamParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAppendUserToTeamParamsWithTimeout creates a new AppendUserToTeamParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAppendUserToTeamParamsWithTimeout(timeout time.Duration) *AppendUserToTeamParams {
	var ()
	return &AppendUserToTeamParams{

		timeout: timeout,
	}
}

// NewAppendUserToTeamParamsWithContext creates a new AppendUserToTeamParams object
// with the default values initialized, and the ability to set a context for a request
func NewAppendUserToTeamParamsWithContext(ctx context.Context) *AppendUserToTeamParams {
	var ()
	return &AppendUserToTeamParams{

		Context: ctx,
	}
}

// NewAppendUserToTeamParamsWithHTTPClient creates a new AppendUserToTeamParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAppendUserToTeamParamsWithHTTPClient(client *http.Client) *AppendUserToTeamParams {
	var ()
	return &AppendUserToTeamParams{
		HTTPClient: client,
	}
}

/*AppendUserToTeamParams contains all the parameters to send to the API endpoint
for the append user to team operation typically these are written to a http.Request
*/
type AppendUserToTeamParams struct {

	/*UserID
	  A user UUID or slug

	*/
	UserID string
	/*UserTeam
	  The user team data to assign

	*/
	UserTeam *models.UserTeamParams

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the append user to team params
func (o *AppendUserToTeamParams) WithTimeout(timeout time.Duration) *AppendUserToTeamParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the append user to team params
func (o *AppendUserToTeamParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the append user to team params
func (o *AppendUserToTeamParams) WithContext(ctx context.Context) *AppendUserToTeamParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the append user to team params
func (o *AppendUserToTeamParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the append user to team params
func (o *AppendUserToTeamParams) WithHTTPClient(client *http.Client) *AppendUserToTeamParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the append user to team params
func (o *AppendUserToTeamParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUserID adds the userID to the append user to team params
func (o *AppendUserToTeamParams) WithUserID(userID string) *AppendUserToTeamParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the append user to team params
func (o *AppendUserToTeamParams) SetUserID(userID string) {
	o.UserID = userID
}

// WithUserTeam adds the userTeam to the append user to team params
func (o *AppendUserToTeamParams) WithUserTeam(userTeam *models.UserTeamParams) *AppendUserToTeamParams {
	o.SetUserTeam(userTeam)
	return o
}

// SetUserTeam adds the userTeam to the append user to team params
func (o *AppendUserToTeamParams) SetUserTeam(userTeam *models.UserTeamParams) {
	o.UserTeam = userTeam
}

// WriteToRequest writes these params to a swagger request
func (o *AppendUserToTeamParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param user_id
	if err := r.SetPathParam("user_id", o.UserID); err != nil {
		return err
	}

	if o.UserTeam != nil {
		if err := r.SetBodyParam(o.UserTeam); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
